AWSTemplateFormatVersion: '2010-09-09'

Resources:

  ## Lambdas 

  # Course Listing Lambda
  NotesCourseList:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'NotesCourseList'
      Runtime: 'python3.8'
      Handler: 'courseList.lambda_handler'
      Role: 'arn:aws:iam::967969319497:role/LabRole'
      Code:
        S3Bucket: 'b00932103backend'
        S3Key: 'LambdaFunctions/courseList.zip'

  #Course Creation Lambda
  NotesCourseCreation:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'NotesCourseCreation'
      Runtime: 'python3.10'
      Handler: 'courseCreation.lambda_handler'
      Role: 'arn:aws:iam::967969319497:role/LabRole'
      Code:
        S3Bucket: 'b00932103backend'
        S3Key: 'LambdaFunctions/courseCreation.zip'

  # Course Details Lambda
  NotesCourseDetails:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'NotesCourseDetails'
      Runtime: 'python3.8'
      Handler: 'courseDetails.lambda_handler'
      Role: 'arn:aws:iam::967969319497:role/LabRole'
      Code:
        S3Bucket: 'b00932103backend'
        S3Key: 'LambdaFunctions/courseDetails.zip'

  # Login Lambda
  NotesCourseLogin:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'NotesCourseLogin'
      Runtime: 'python3.8'
      Handler: 'courseLogin.lambda_handler'
      Role: 'arn:aws:iam::967969319497:role/LabRole'
      Code:
        S3Bucket: 'b00932103backend'
        S3Key: 'LambdaFunctions/courseLogin.zip'
  
  # Register Lambda
  NotesCourseRegister:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'NotesCourseRegister'
      Runtime: 'python3.8'
      Handler: 'courseRegister.lambda_handler'
      Role: 'arn:aws:iam::967969319497:role/LabRole'
      Code:
        S3Bucket: 'b00932103backend'
        S3Key: 'LambdaFunctions/courseRegister.zip'
  
  # Store File Lambda
  NotesStoreFile:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'NotesStoreFile'
      Runtime: 'python3.8'
      Handler: 'storeFile.lambda_handler'
      Role: 'arn:aws:iam::967969319497:role/LabRole'
      Code:
        S3Bucket: 'b00932103backend'
        S3Key: 'LambdaFunctions/storeFile.zip'

  # API Gateway Creation for Routing to Lambdas
  NotesAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "NotesAPI"
      EndpointConfiguration:
        Types:
          - REGIONAL
      Description: "API Gateway for Notes Distribution System Term Assignment"

  ## Resources

  # Resource for Course Listing
  CourseListResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref NotesAPI
      ParentId: !GetAtt NotesAPI.RootResourceId
      PathPart: "course-list"

  # Resource for Course Details
  CourseDetailsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref NotesAPI
      ParentId: !GetAtt NotesAPI.RootResourceId
      PathPart: "course"

  # Resource for Course Login
  CourseLoginResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref NotesAPI
      ParentId: !GetAtt NotesAPI.RootResourceId
      PathPart: "login"

  # Resource for Register
  CourseRegisterResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref NotesAPI
      ParentId: !GetAtt NotesAPI.RootResourceId
      PathPart: "register"

  # Resource for Register
  StoreFileResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref NotesAPI
      ParentId: !GetAtt NotesAPI.RootResourceId
      PathPart: "store-file"

  ## Methods

  # Get Method for Course Listing
  NotesCourseListGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: "GET"
      RestApiId: !Ref NotesAPI
      ResourceId: !Ref CourseListResource
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotesCourseList.Arn}/invocations"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"body": $input.json("$")}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '400'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '500'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: '400'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: '500'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Origin: false

  # Get Method for Course Details
  NotesCourseDetailsGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: "GET"
      RestApiId: !Ref NotesAPI
      ResourceId: !Ref CourseDetailsResource
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotesCourseDetails.Arn}/invocations"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: |
            {
              "courseID": "$input.params('courseID')"
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"body": $input.json("$")}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '400'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '500'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: '400'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: '500'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Origin: false

  # Post Method for Login
  NotesLoginPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: "POST"
      RestApiId: !Ref NotesAPI
      ResourceId: !Ref CourseLoginResource
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotesCourseLogin.Arn}/invocations"
        PassthroughBehavior: 'WHEN_NO_MATCH'
        RequestTemplates:
          application/json: |
            #set($inputRoot = $input.path('$'))
            {
              "courseID": "$inputRoot.courseID",
              "password": "$inputRoot.password"
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"body": $input.json("$")}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '400'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '500'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: '400'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: '500'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Origin: false

  # Post Method for Register
  NotesRegisterPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: "POST"
      RestApiId: !Ref NotesAPI
      ResourceId: !Ref CourseRegisterResource
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotesCourseRegister.Arn}/invocations"
        PassthroughBehavior: 'WHEN_NO_MATCH'
        RequestTemplates:
          application/json: |
            #set($inputRoot = $input.path('$'))
            {
              "emailID": "$inputRoot.emailID",
              "courseID": "$inputRoot.courseID"
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"body": $input.json("$")}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '400'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '500'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: '400'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: '500'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Origin: false

  # Post Method for Store File
  NotesStoreFilePostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: "POST"
      RestApiId: !Ref NotesAPI
      ResourceId: !Ref StoreFileResource
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotesStoreFile.Arn}/invocations"
        PassthroughBehavior: 'WHEN_NO_MATCH'
        RequestTemplates:
          application/json: |
            #set($inputRoot = $input.path('$'))
            {
              "courseID": "$inputRoot.courseID",
              "lectureNo": "$inputRoot.lectureNo",
              "fileURL": "$inputRoot.fileURL"
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"body": $input.json("$")}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '400'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '500'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: '400'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: '500'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: "'application/json'"
            method.response.header.Access-Control-Allow-Origin: false
 
  # Options method for Login
  NotesLoginOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      AuthorizationType: NONE
      RestApiId: !Ref NotesAPI
      ResourceId: !Ref CourseLoginResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Options method for Register
  NotesRegisterOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      AuthorizationType: NONE
      RestApiId: !Ref NotesAPI
      ResourceId: !Ref CourseRegisterResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  
  # Options method for Store File
  NotesStoreFileOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      AuthorizationType: NONE
      RestApiId: !Ref NotesAPI
      ResourceId: !Ref StoreFileResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false


  ## Deployment API Gateway

  NotesAPIGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref NotesAPI
    DependsOn:
      - NotesCourseListGetMethod
      - NotesCourseDetailsGetMethod
      - NotesLoginPostMethod
      - NotesRegisterPostMethod
      - NotesStoreFilePostMethod

  ## Staging

  NotesAPIGatewayStageCF:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: "prod"
      Description: "Production Deployment for REST APIs"
      RestApiId: !Ref NotesAPI
      DeploymentId: !Ref NotesAPIGatewayDeployment

  ## Setting Permission for API Gateway to Access Lambdas

  # Notes Course List Lambda Permission
  NotesCourseListLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt NotesCourseList.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - NotesAPIGatewayDeployment

  # Notes Course List Lambda Permission
  NotesCourseDetailsLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt NotesCourseDetails.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - NotesAPIGatewayDeployment

  # Notes Login Lambda Permission
  NotesLoginLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt NotesCourseLogin.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - NotesAPIGatewayDeployment

  # Notes Register Lambda Permission
  NotesRegisterLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt NotesCourseRegister.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - NotesAPIGatewayDeployment

  # Store File Lambda Permission
  NotesStoreFileLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt NotesStoreFile.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - NotesAPIGatewayDeployment
  
Outputs:
  ApiGatewayUrl:
    Value: !Sub "https://${NotesAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/"
    Description: "URL of the API Gateway endpoint"

  NotesCourseListLambdaArn:
    Value: !GetAtt NotesCourseList.Arn
    Description: "ARN of the NotesCourseList Lambda function"

  NotesCourseDetailsLambdaArn:
    Value: !GetAtt NotesCourseDetails.Arn
    Description: "ARN of the NotesCourseDetails Lambda function"

  NotesCourseLoginLambdaArn:
    Value: !GetAtt NotesCourseLogin.Arn
    Description: "ARN of the NotesCourseLogin Lambda function"

  NotesCourseRegisterLambdaArn:
    Value: !GetAtt NotesCourseRegister.Arn
    Description: "ARN of the NotesCourseRegister Lambda function"

  NotesStoreFileLambdaArn:
    Value: !GetAtt NotesStoreFile.Arn
    Description: "ARN of the NotesStoreFile Lambda function"
